generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x","debian-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id         Int               @id(map: "PK_cace4a159ff9f2512dd42373760") @default(autoincrement())
  name       String            @db.VarChar(100)
  email      String            @unique(map: "UQ_e12875dfb3b1d92d7d7c5377e22") @db.VarChar(100)
  matricula  String            @unique(map: "UQ_8e1f623798118e629b46a9e6299") @db.VarChar(30)
  password   String            @unique(map: "UQ_a6235b5ef0939d8deaad755fc87") @db.VarChar(100)
  parentId   Int               @db.Integer()
  created_at DateTime          @default(now()) @db.Timestamp(6)
  updated_at DateTime          @default(now()) @db.Timestamp(6)
  work_hours work_hours[]
}

enum user_profile_enum {
    CUSTOMER @map("0")
    EMPLOYEE @map("1")
    ADMIN @map("2")
}

model work_hours {
  id         Int               @id(map: "PK_cace4a159ff9f2512dd42373761") @default(autoincrement())
  date       DateTime          @db.Timestamp(6)
  justificative String?       @db.VarChar(100)
  approved   Boolean           @default(true)
  created_at DateTime          @default(now()) @db.Timestamp(6)
  updated_at DateTime          @default(now()) @db.Timestamp(6)
  user_id    Int               
  user       user              @relation(fields: [user_id], references: [id])
}


